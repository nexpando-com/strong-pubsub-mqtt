global
  log 127.0.0.1 local0
  log 127.0.0.1 local1 notice

defaults
  mode http
  log global
  option httplog
  option  http-server-close
  option  dontlognull
  option  redispatch
  option  contstats
  retries 3
  backlog 10000
  timeout client          25s
  timeout connect          5s
  timeout server          25s
# timeout tunnel available in ALOHA 5.5 or HAProxy 1.5-dev10 and higher
  timeout tunnel        3600s
  timeout http-keep-alive  1s
  timeout http-request    15s
  timeout queue           30s
  timeout tarpit          60s
  default-server inter 3s rise 2 fall 3
  option forwardfor

listen stats
  bind *:8888
  mode http
  log global
  maxconn 10
  timeout queue 100s
  stats enable
  stats hide-version
  stats refresh 30s
  stats show-node
  stats auth admin:admin
  stats uri /haproxy?stats

frontend www
    bind *:80
    mode http
    timeout client 60s

    # Routing based on Host header
    acl hdr_host_ws hdr_beg(Host) -i ws.
    # Connection: Upgrade
    acl hdr_connection_upgrade hdr(Connection)  -i upgrade
    # Upgrade: websocket
    acl hdr_upgrade_websocket  hdr(Upgrade)     -i websocket
    # Sec-WebSocket-Protocol: mqtt
    acl hdr_sec_websocket hdr(Sec-WebSocket-Protocol) -i mqtt

    use_backend websocket_backend if hdr_host_ws
    use_backend websocket_backend if hdr_connection_upgrade hdr_upgrade_websocket
    use_backend websocket_backend if hdr_sec_websocket

    # redirect scheme https if !{ ssl_fc }

    use_backend websocket_backend if hdr_host_ws
    use_backend websocket_backend if hdr_connection_upgrade hdr_upgrade_websocket

backend websocket_backend
    balance source
    option http-server-close
    option forceclose

    ## websocket protocol validation
    acl hdr_connection_upgrade  hdr(Connection)                 -i upgrade
    acl hdr_upgrade_websocket   hdr(Upgrade)                    -i websocket
    acl hdr_websocket_key       hdr_cnt(Sec-WebSocket-Key)      eq 1
    acl hdr_websocket_version   hdr_cnt(Sec-WebSocket-Version)  eq 1
    # acl ws_valid_protocol       hdr(Sec-WebSocket-Protocol)     echo-protocol
    http-request  deny if ! hdr_connection_upgrade ! hdr_upgrade_websocket ! hdr_websocket_key ! hdr_websocket_version
    # http-request  deny if ! ws_valid_protocol
    http-check    expect status 101

    server vernemq1 vernemq1:8080 weight 1 maxconn 16384 weight 10 cookie vernemq1 check
    server vernemq2 vernemq2:8080 weight 1 maxconn 16384 weight 10 cookie vernemq2 check
    server vernemq3 vernemq3:8080 weight 1 maxconn 16384 weight 10 cookie vernemq3 check

listen mqtt
  bind *:1883
  mode tcp
  # Use this to avoid the connection loss when client subscribed for a topic and its idle for sometime
  option clitcpka # For TCP keep-alive
  timeout client 3h # By default TCP keep-alive interval is 2hours in OS kernal, 'cat /proc/sys/net/ipv4/tcp_keepalive_time'
  timeout server 3h # By default TCP keep-alive interval is 2hours in OS kernal
  option tcplog
  balance leastconn
  server vernemq1 vernemq1:1883 check port 1883 fall 1
  server vernemq2 vernemq2:1883 check port 1883 fall 1
  server vernemq3 vernemq3:1883 check port 1883 fall 1